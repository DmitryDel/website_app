// import axios from 'axios';
// import api from './api'; // <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
// import { type LoginData, type RegisterData } from '../types/auth';
//
// // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// export const registerUser = async (userData: RegisterData) => {
//   try {
//     // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ endpoint /users/
//     const response = await api.post('/users/', userData);
//     // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å–ª–∞–ª —Å–µ—Ä–≤–µ—Ä –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
//     return response.data;
//   } catch (error) {
//     // –ï—Å–ª–∏ axios –ø–æ–π–º–∞–ª –æ—à–∏–±–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª –∫–æ–¥–æ–º 4xx –∏–ª–∏ 5xx)
//     if (axios.isAxiosError(error) && error.response) {
//       // –ú—ã "–ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º" –¥–∞–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ —Å –±—ç–∫–µ–Ω–¥–∞
//       throw new Error(error.response.data.detail || 'Registration failed');
//     }
//     // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–∞ –Ω–µ –æ—à–∏–±–∫–∞ axios, –∞ —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ
//     throw new Error('An unexpected error occurred');
//   }
// };
//
// // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Ö–æ–¥–∞
// export const loginUser = async (loginData: LoginData) => {
//   // –î–ª—è OAuth2PasswordRequestForm –¥–∞–Ω–Ω—ã–µ –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∫ FormData
//   const formData = new FormData();
//   formData.append('username', loginData.email);
//   formData.append('password', loginData.password);
//
//   try {
//     // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –Ω–∞ endpoint /auth/login
//     const response = await api.post('/auth/login', formData);
//     return response.data; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º { access_token: "...", token_type: "bearer" }
//   } catch (error) {
//     if (axios.isAxiosError(error) && error.response) {
//       throw new Error(error.response.data.detail || 'Login failed');
//     }
//     throw new Error('An unexpected error occurred');
//   }
// };

import axios from 'axios';
import api from './api'; // <-- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
import { type LoginData, type RegisterData } from '../types/auth';

// const api = axios.create({
//   baseURL: 'http://localhost:8000/api/v1',
//   withCredentials: true, // üîë –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ –ø—Ä–∏—ë–º cookie
// });

let isRefreshing = false;
let failedQueue: Array<{
  resolve: (value?: any) => void;
  reject: (error: any) => void;
}> = [];

const processQueue = (error: any, token: string | null = null) => {
  failedQueue.forEach(prom => token ? prom.resolve(token) : prom.reject(error));
  failedQueue = [];
};

api.interceptors.request.use(config => {
  const token = localStorage.getItem('access_token');
  if (token && config.headers) {
    config.headers['Authorization'] = `Bearer ${token}`;
  }
  return config;
});

api.interceptors.response.use(
  res => res,
  err => {
    const originalRequest = err.config;
    if (err.response?.status === 401 && !originalRequest._retry) {
      if (isRefreshing) {
        return new Promise((resolve, reject) => {
          failedQueue.push({ resolve, reject });
        }).then(token => {
          originalRequest.headers['Authorization'] = `Bearer ${token}`;
          return api(originalRequest);
        });
      }

      originalRequest._retry = true;
      isRefreshing = true;

      return new Promise(async (resolve, reject) => {
        try {
          const response = await api.post('/auth/refresh');
          const newToken = response.data.access_token;
          localStorage.setItem('access_token', newToken);
          processQueue(null, newToken);
          originalRequest.headers['Authorization'] = `Bearer ${newToken}`;
          resolve(api(originalRequest));
        } catch (refreshError) {
          processQueue(refreshError, null);
          window.location.href = '/login';
          reject(refreshError);
        } finally {
          isRefreshing = false;
        }
      });
    }
    return Promise.reject(err);
  }
);

export default api;
export const loginUser = async (data: { email: string; password: string }) => {
  const form = new FormData();
  form.append('username', data.email);
  form.append('password', data.password);
  const res = await api.post('/auth/login', form);
  localStorage.setItem('access_token', res.data.access_token);
  return res.data;
};
export const registerUser = async (data: { email: string; password: string }) => {
  const res = await api.post('/users/', data);
  return res.data;
};